# Streamlit Secrets Configuration Example
# Copy this file to secrets.toml (without .example) and configure as needed

# ============================================================
# ONLINE RETRAINING CONFIGURATION
# ============================================================

# Enable online model retraining after every 5 patient entries
# NOW OPTIMIZED: Includes aggressive memory management for cloud stability
# 
# Options:
#   "true"  = Enable online retraining (optimized with 200 timesteps + memory cleanup)
#   "false" = Disable online retraining (collect data only)
#
# Default: true (ENABLED)

ENABLE_RETRAINING = "true"

# ============================================================
# RECOMMENDED SETTINGS
# ============================================================

# For Clinical Trials with Optimized Online Retraining (DEFAULT):
#   ENABLE_RETRAINING = "true"
#   - Retrains every 5 entries automatically
#   - Ultra-low timesteps (200) for stability
#   - Aggressive memory cleanup
#   - Monitor for crashes, disable if needed
#
# For Maximum Stability (Conservative):
#   ENABLE_RETRAINING = "false"
#   - 100% stable, no crashes
#   - Data collection only
#   - Retrain offline periodically

# ============================================================
# ENABLING ONLINE RETRAINING ON STREAMLIT CLOUD
# ============================================================

# To enable online retraining on Streamlit Cloud:
#
# 1. Go to your app dashboard on share.streamlit.io
# 2. Click "Settings" > "Secrets"
# 3. Add the following line:
#
#    ENABLE_RETRAINING = "true"
#
# 4. Save and redeploy
#
# CAUTION: Monitor your app for stability issues!
# If crashes occur, immediately set back to "false"

# ============================================================
# MEMORY OPTIMIZATIONS APPLIED
# ============================================================

# The app now includes:
# - Reduced timesteps: 200 (instead of 1000)
# - Aggressive garbage collection
# - PyTorch cache clearing
# - Environment cleanup after each training
# - Error recovery with memory cleanup
#
# These optimizations improve stability but don't eliminate
# all risk of crashes on memory-constrained environments.
